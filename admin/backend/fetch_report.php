<?php
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

// Check if user is logged in (admin or client) - Adjust roles as needed
if (!isset($_SESSION['admin_user_id']) && !isset($_SESSION['client_user_id']) && !isset($_SESSION['user_id'])) {
    header("Location: login.php"); // Redirect to login if not logged in
    exit;
}

// Include header or necessary setup files
// include_once 'header.php'; // Example

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generate Reports</title>
    <!-- Link to your CSS file -->
    <link rel="stylesheet" href="css/style.css">
    <!-- Optional: Link to Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Basic styling for the report page */
        body {
            font-family: sans-serif;
            margin: 20px;
        }
        .report-container {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        .report-options label {
            display: block;
            margin-bottom: 10px;
        }
        .report-options input[type="date"],
        .report-options button {
            padding: 8px;
            margin-right: 10px;
        }
        .report-options button {
            cursor: pointer;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
        }
        .report-options button:hover {
            background-color: #0056b3;
        }
        #report-output {
            margin-top: 20px;
            border-top: 1px dashed #ccc;
            padding-top: 20px;
        }
        #loading-indicator {
            display: none; /* Hidden by default */
            margin-top: 15px;
            font-style: italic;
            color: #555;
        }
        .error-message-frontend {
             color: #dc3545; /* Red */
             background-color: #f8d7da;
             border: 1px solid #f5c6cb;
             padding: 10px;
             border-radius: 4px;
             margin-top: 10px;
        }
        /* Style for the inventory source options */
        #inventory-source-options {
             margin-left: 20px;
             padding-left: 15px;
             border-left: 2px solid #eee;
             margin-top: 5px;
             margin-bottom: 10px;
             display: none; /* Initially hidden */
        }
         #inventory-source-options label {
             display: inline-block; /* Place labels side-by-side */
             margin-right: 15px;
             font-weight: normal;
         }

        /* Styling for tables generated by backend (ensure consistency) */
        .accounts-table, .summary-table { /* Use classes from backend output */
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }
        .accounts-table th, .accounts-table td,
        .summary-table th, .summary-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .accounts-table th {
            background-color: #f2f2f2;
        }
         .accounts-table td[style*="text-align: right;"],
         .summary-table td[style*="text-align: right;"] {
             text-align: right;
         }
        /* Add styles for status classes if needed (e.g., .status-completed) */
         .status-completed { color: green; }
         .status-pending { color: orange; }
         .status-cancelled { color: red; }

         /* Styling for low stock section from backend */
         .low-stock-section {
             margin-bottom: 25px;
             border: 2px solid #dc3545; /* Red border */
             padding: 15px;
             border-radius: 5px;
             background-color: #fdf2f2; /* Light red background */
         }
         .low-stock-section h4 {
             margin-top: 0;
             color: #dc3545; /* Red heading */
         }
         .low-stock-section p {
             margin-top: 0;
         }

         /* Styling for OK low stock message */
         .low-stock-section[style*="border: 1px solid #198754;"] {
             border: 1px solid #198754; /* Green border */
             background-color: #f2fdf5; /* Light green background */
         }
         .low-stock-section[style*="border: 1px solid #198754;"] p {
             color: #198754; /* Green text */
         }


    </style>
</head>
<body>

    <h1>Generate Reports</h1>

    <div class="report-container">
        <h2>Select Report Options</h2>
        <form id="report-form" class="report-options">
            <div>
                <label for="start_date">Start Date:</label>
                <input type="date" id="start_date" name="start_date">
            </div>
            <div>
                <label for="end_date">End Date:</label>
                <input type="date" id="end_date" name="end_date">
                <small>(Leave dates blank if not applicable for the selected report)</small>
            </div>

            <hr>

            <p><strong>Select Report Type:</strong></p>
            <div>
                <label>
                    <input type="radio" name="report_type" value="sales_summary" required> Sales Summary
                </label>
            </div>
             <div>
                 <label>
                     <input type="radio" name="report_type" value="order_trends" required> Order Listing
                 </label>
             </div>
            <div>
                <label>
                    <input type="radio" name="report_type" value="inventory_status" required> Inventory Status
                </label>
                <!-- Inventory Source Options - Shown only when Inventory Status is selected -->
                <div id="inventory-source-options">
                     <label style="margin-right: 10px;">
                         <input type="radio" name="inventory_source" value="company" checked> Company
                     </label>
                     <label>
                         <input type="radio" name="inventory_source" value="walkin"> Walk-in
                     </label>
                </div>
            </div>
            <!-- Add more report types here as needed -->


            <div style="margin-top: 20px;">
                <button type="submit">Generate Report</button>
            </div>
        </form>

        <div id="loading-indicator">
            <i class="fas fa-spinner fa-spin"></i> Loading report...
        </div>

        <div id="report-output">
            <!-- Report content will be loaded here -->
            <p>Select report options and click "Generate Report".</p>
        </div>
    </div>

    <script>
        const reportForm = document.getElementById('report-form');
        const reportOutput = document.getElementById('report-output');
        const loadingIndicator = document.getElementById('loading-indicator');
        const inventorySourceOptions = document.getElementById('inventory-source-options');

        // --- Event Listener for Report Type Change ---
        document.querySelectorAll('input[name="report_type"]').forEach(radio => {
            radio.addEventListener('change', function() {
                // Show/hide inventory source options based on selection
                if (this.value === 'inventory_status') {
                    inventorySourceOptions.style.display = 'block';
                } else {
                    inventorySourceOptions.style.display = 'none';
                }

                // Show/hide date inputs based on selection (optional enhancement)
                const dateInputs = document.querySelectorAll('input[type="date"]');
                 const requiresDates = ['sales_summary', 'order_trends'].includes(this.value);
                 dateInputs.forEach(input => {
                     input.closest('div').style.display = requiresDates ? 'block' : 'none';
                 });
                 // If dates not required, clear them to avoid sending unnecessary data
                 if (!requiresDates) {
                     document.getElementById('start_date').value = '';
                     document.getElementById('end_date').value = '';
                 }

            });
        });

         // --- Initial Check on Page Load ---
         function initializeFormState() {
             const selectedReportType = document.querySelector('input[name="report_type"]:checked');
             if (selectedReportType) {
                 // Trigger change event to set initial visibility
                 selectedReportType.dispatchEvent(new Event('change'));
             } else {
                 // If nothing is selected initially, hide date inputs and inventory options
                 document.querySelectorAll('input[type="date"]').forEach(input => {
                     input.closest('div').style.display = 'none';
                 });
                 inventorySourceOptions.style.display = 'none';
             }
         }
         initializeFormState(); // Run on page load


        // --- Form Submission Handler ---
        reportForm.addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent default form submission
            fetchReport();
        });

        // --- Function to Fetch and Display Report ---
        function fetchReport() {
            const selectedReportTypeInput = document.querySelector('input[name="report_type"]:checked');
            if (!selectedReportTypeInput) {
                reportOutput.innerHTML = `<div class="error-message-frontend">Please select a report type.</div>`;
                return;
            }
            const reportType = selectedReportTypeInput.value;

            let inventorySource = null;
            if (reportType === 'inventory_status') {
                 const selectedSourceInput = document.querySelector('input[name="inventory_source"]:checked');
                 if (!selectedSourceInput) {
                     // This alert should prevent the 400 error if user forgets to select
                     alert('Please select an inventory source (Company or Walk-in) for the Inventory Status report.');
                     reportOutput.innerHTML = `<div class="error-message-frontend">Inventory source selection is required.</div>`;
                     return; // Stop execution
                 }
                 inventorySource = selectedSourceInput.value;
            }

            const startDate = document.getElementById('start_date').value;
            const endDate = document.getElementById('end_date').value;

            // Prepare form data
            const formData = new FormData();
            formData.append('report_type', reportType);

             // Append dates only if they are selected and relevant for the report type
             const requiresDates = ['sales_summary', 'order_trends'].includes(reportType);
             if (requiresDates) {
                  if (startDate) formData.append('start_date', startDate);
                  if (endDate) formData.append('end_date', endDate);
             }

            // Append inventory source if applicable
            if (inventorySource) {
                formData.append('inventory_source', inventorySource);
            }

            // Show loading indicator, clear previous output
            loadingIndicator.style.display = 'block';
            reportOutput.innerHTML = '';

            // Log data being sent for debugging
            console.log("Sending data to backend:", Object.fromEntries(formData));


            // --- AJAX Call ---
            fetch('backend/fetch_report.php', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    // If response status is not 2xx, get the error message text
                    return response.text().then(text => {
                         // Throw an error that includes the HTTP status and the response text
                         throw new Error(`HTTP error ${response.status}: ${text}`);
                    });
                }
                return response.text(); // Get the HTML response body as text
            })
            .then(data => {
                // Display the HTML report content from the backend
                reportOutput.innerHTML = data;
            })
            .catch(error => {
                console.error('Error fetching report:', error);
                // Display a user-friendly error message, including details from the backend if available
                // The error.message might already contain the formatted HTML error div from the backend
                reportOutput.innerHTML = `<div class="error-message-frontend">Error loading report: ${error.message}</div>`;
            })
            .finally(() => {
                // Hide loading indicator regardless of success or failure
                loadingIndicator.style.display = 'none';
            });
        }

    </script>

</body>
</html>